cmake_minimum_required(VERSION 3.6)
project(ex3)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

set(CMAKE_CXX_STANDARD 11)
#set(SOURCE_FILES Point.cpp Point.h tests/TripInfoTest.cpp Cab.cpp Cab.h tests/CabTest.cpp CarColors.h CarsManufactor.h CheckPoint.cpp CheckPoint.h Driver.cpp Driver.h tests/DriverTest.cpp Gps.cpp Gps.h tests/GpsTest.cpp Grid.cpp Grid.h tests/GridTest.cpp LuxuryCab.cpp LuxuryCab.h tests/LuxuryCabTest.cpp Map.cpp Map.h MaterialStatus.h Passenger.cpp Passenger.h Person.h TexiCenter.cpp TexiCenter.h tests/TexiCenterTest.cpp tests/PassengerTest.cpp TripInfo.cpp TripInfo.h Vehicles.h tests/CheckPointTest.cpp tests/MapTest.cpp main.cpp client.cpp server.cpp Udp.cpp Udp.h Socket.cpp Socket.h)
set(SOURCE_FILES Information.cpp Information.h ThreadPool.cpp ThreadPool.h Task.cpp Task.h Point.cpp Point.h Cab.cpp Cab.h CarColors.h CarsManufactor.h CheckPoint.cpp CheckPoint.h Driver.cpp Driver.h Gps.cpp Gps.h Grid.cpp Grid.h LuxuryCab.cpp LuxuryCab.h Map.cpp Map.h MaterialStatus.h Passenger.cpp Passenger.h Person.h TexiCenter.cpp TexiCenter.h TripInfo.cpp TripInfo.h Vehicles.h Udp.cpp Udp.h Socket.cpp Socket.h Tcp.cpp Tcp.h Information.cpp Information.h)
add_subdirectory(lib/googletest)
include_directories(lib/googletest/googletest/include)
include_directories(lib/googletest/googlemock/include)

#set(BOOST_ROOT CACHE PATH "/usr/include/boost/")
#find_package(Boost 1.58.0 COMPONENTS serialization system)
set(BOOST_ROOT CACHE PATH "/usr/include/boost/")
find_package(Boost 1.54.0 COMPONENTS serialization system)
include_directories(${Boost_INCLUDE_DIR})
#link_libraries(${Boost_LIBRARIES} ${Boost_LIBRARY_DIRS} ${Boost_LIBRARIES} ${Boost_system} ${Boost_SERIALIZATION} ${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY})
link_libraries(${Boost_LIBRARIES})

#add_executable(ex3 ${SOURCE_FILES})
add_executable(client client.cpp ${SOURCE_FILES})
add_executable(server server.cpp ${SOURCE_FILES})
#target_link_libraries(ex3 gtest gtest_main ${Boost_LIBRARIES})
target_link_libraries(client ${Boost_LIBRARIES})
target_link_libraries(server ${Boost_LIBRARIES})
target_link_libraries(client Threads::Threads)
target_link_libraries(server Threads::Threads)